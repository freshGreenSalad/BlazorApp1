@using BlazorApp1.Shared.questionTypes
@using BlazorApp1.Shared

<div class="p-1">
    <RadzenCard>
        <RadzenText>@quesitonNumber</RadzenText>

        <RadzenText 
            TextStyle="TextStyle.Subtitle2" 
            TagName="TagName.H3">
            Enter your Radio Button Question
        </RadzenText>

        <RadzenTextArea 
            @bind-Value=QuestionText
                        Change=@(args => SetQuestionLocal())
                        Placeholder="Enter here..." />

        <hr>

        <RadzenText 
            TextStyle="TextStyle.Subtitle2" 
            TagName="TagName.H3">
            Enter your RadioButton answers (users can only select one of these)
        </RadzenText>

        <div class="row">
            <div class="col-9 p-1">
                <RadzenTextArea @bind-Value=questionBeingAdded Change=@(args => SetQuestionLocal())
                    Placeholder="Enter here..." />
            </div>
            <div class="col-3 p-1">
                <RadzenButton Click=@(args => addQuestion(@questionBeingAdded?? "no val"))>
                    Add
                </RadzenButton>
            </div>
        </div>

        @foreach (string quesiton in questionList)
        {
            <RadioOption 
                onclick=@(args => removeQuestionFromList(quesiton))
                valueChangeSoSaveQuestion=@(() => SetQuestionLocal())
                Answer=@quesiton />
        }
    </RadzenCard>
</div>

@code {
    [Parameter]
    public int quesitonNumber { get; set; }

    [Parameter]
    public EventCallback<Question> SetQuestion { get; set; }

    public List<string> questionList = new List<string>();

    private string? QuestionText { get; set; }

    public string? questionBeingAdded { get; set; }

    public void removeQuestionFromList(string questionToRemove)
    {

        questionList.Remove(questionToRemove);
    }

    public void addQuestion(string questionToAdd)
    {
        if (questionToAdd == "no val" || questionToAdd == "")
        {
            return;
        }
        questionBeingAdded = questionToAdd;
        questionList.Add(questionToAdd);
        questionBeingAdded = "";
    }

    private async Task SetQuestionLocal() => await SetQuestion.InvokeAsync(
        new MultiChoiceQuestion
            {
                QuestionNumber = quesitonNumber,
                question = QuestionText,
                listOfMultiChoiceQuestions = questionList
            }
    );
}
